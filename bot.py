import logging
from typing import Dict, List
from datetime import datetime, timedelta, date
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, 
    CallbackContext, ConversationHandler, MessageHandler, Filters
)
from rzd_api import RzdAPI  # –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_STATION_FROM, SELECT_STATION_TO, SELECT_DATE, CONFIRM_SEARCH = range(4)

class RzdTicketBot:
    def __init__(self, token: str):
        self.updater = Updater(token)
        self.dispatcher = self.updater.dispatcher
        self.user_searches: Dict[int, Dict] = {}
        self.active_subscriptions: Dict[int, List[Dict]] = {}
        self.rzd_api = RzdAPI()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ API
        
        self._register_handlers()
        
    def _register_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('search', self.search_start)],
            states={
                SELECT_STATION_FROM: [
                    MessageHandler(Filters.text & ~Filters.command, self.select_station_from)
                ],
                SELECT_STATION_TO: [
                    MessageHandler(Filters.text & ~Filters.command, self.select_station_to)
                ],
                SELECT_DATE: [
                    MessageHandler(Filters.text & ~Filters.command, self.select_date)
                ],
                CONFIRM_SEARCH: [
                    CallbackQueryHandler(self.confirm_search, pattern='^(confirm|cancel)_search$')
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        self.dispatcher.add_handler(CommandHandler("start", self.start))
        self.dispatcher.add_handler(CommandHandler("help", self.help))
        self.dispatcher.add_handler(CommandHandler("subscriptions", self.show_subscriptions))
        self.dispatcher.add_handler(CallbackQueryHandler(self.subscribe, pattern='^subscribe_'))
        self.dispatcher.add_handler(conv_handler)
        self.dispatcher.add_error_handler(self.error_handler)

    def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    def help(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/search - –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n"
            "/subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ë–æ—Ç –º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )

    def search_start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ - –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):"
        )
        return SELECT_STATION_FROM
    
    def show_subscriptions(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        if user_id not in self.active_subscriptions or not self.active_subscriptions[user_id]:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        
        response = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for sub in self.active_subscriptions[user_id]:
            response += (
                f"–ú–∞—Ä—à—Ä—É—Ç: {sub['from']['name']} ‚Üí {sub['to']['name']}\n"
                f"–î–∞—Ç–∞: {sub['date']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {sub['last_check'].strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        update.message.reply_text(response)

    def check_tickets_periodically(self, context: CallbackContext) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        for user_id, subscriptions in self.active_subscriptions.items():
            for sub in subscriptions:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä API
                    tickets = self.rzd_api.get_tickets(
                        from_code=sub['from']['code'],
                        to_code=sub['to']['code'],
                        date=datetime.strptime(sub['date'], "%d.%m.%Y")
                    )

                    search_date = datetime.strptime(sub['date'], "%d.%m.%Y").date()
                    if search_date < datetime.now().date():
                        continue

                    if tickets is None:
                        continue
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    new_tickets = self._find_new_tickets(sub['tickets'], tickets)
                    
                    if new_tickets:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
                        message = "üöÄ –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –±–∏–ª–µ—Ç—ã:\n\n"
                        for ticket in new_tickets:
                            message += (
                                f"üöÇ –ü–æ–µ–∑–¥: {ticket.get('number', 'N/A')}\n"
                                f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {ticket.get('departure', 'N/A')}\n"
                                f"üïì –ü—Ä–∏–±—ã—Ç–∏–µ: {ticket.get('arrival', 'N/A')}\n"
                                f"üí∞ –¶–µ–Ω–∞: {self._format_price(ticket.get('seats', []))}\n"
                                f"üí∫ –ú–µ—Å—Ç–∞: {self._format_seats(ticket.get('seats', []))}\n\n"
                            )
                        
                        context.bot.send_message(
                            chat_id=user_id,
                            text=message
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    sub['tickets'] = tickets
                    sub['last_check'] = datetime.now(pytz.utc)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    
    def _find_new_tickets(self, old_tickets: List[Dict], new_tickets: List[Dict]) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        old_numbers = {t.get('number') for t in old_tickets if t.get('number')}
        return [t for t in new_tickets if t.get('number') not in old_numbers]
    
    def select_date(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        date_str = update.message.text
        try:
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            if date < datetime.now().date():
                raise ValueError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")
        except ValueError as e:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return SELECT_DATE
        
        context.user_data['date'] = date_str
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        station_from = context.user_data['station_from']
        station_to = context.user_data['station_to']
        
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_search"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_search"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {station_from['name']}\n"
            f"–ü—Ä–∏–±—ã—Ç–∏–µ: {station_to['name']}\n"
            f"–î–∞—Ç–∞: {date_str}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∏—Å–∫?",
            reply_markup=reply_markup
        )
        return CONFIRM_SEARCH

    def select_station_from(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ API"""
        query = update.message.text
        stations = self.rzd_api.station_by_name(query)
        
        if not stations:
            update.message.reply_text("üöÇ –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return SELECT_STATION_FROM
        
        context.user_data['station_from'] = {
            'code': stations[0]['code'],
            'name': stations[0]['name']
        }
        
        update.message.reply_text(
            f"üìç –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: {stations[0]['name']}\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"
        )
        return SELECT_STATION_TO

    def select_station_to(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        query = update.message.text
        stations = self.rzd_api.station_by_name(query)
        
        if not stations:
            update.message.reply_text("üöÇ –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return SELECT_STATION_TO
        
        context.user_data['station_to'] = {
            'code': stations[0]['code'],
            'name': stations[0]['name']
        }
        
        update.message.reply_text(
            f"üìç –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: {stations[0]['name']}\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        return SELECT_DATE

    def confirm_search(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ API"""
        query = update.callback_query
        query.answer()
        
        if query.data == 'cancel_search':
            query.edit_message_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        search_params = context.user_data
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–µ—Ç–æ–¥ get_tickets –≤–º–µ—Å—Ç–æ tickets
            tickets = self.rzd_api.get_tickets(
                from_code=search_params['station_from']['code'],
                to_code=search_params['station_to']['code'],
                date=datetime.strptime(search_params['date'], "%d.%m.%Y")
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤: {e}")
            query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        
        if not tickets:
            query.edit_message_text("üòû –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫
        if user_id not in self.user_searches:
            self.user_searches[user_id] = []
        
        search_data = {
            'from': search_params['station_from'],
            'to': search_params['station_to'],
            'date': search_params['date'],
            'last_check': datetime.now(pytz.utc),
            'tickets': tickets
        }
        
        self.user_searches[user_id].append(search_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üé´ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n\n"
        for ticket in tickets[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            response += (
                f"üöÇ –ü–æ–µ–∑–¥: {ticket.get('number', 'N/A')}\n"
                f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {ticket.get('departure', 'N/A')}\n"
                f"üïì –ü—Ä–∏–±—ã—Ç–∏–µ: {ticket.get('arrival', 'N/A')}\n"
                f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {self._format_price(ticket.get('seats', []))}\n"
                f"üí∫ –ú–µ—Å—Ç–∞: {self._format_seats(ticket.get('seats', []))}\n\n"
            )
        
        query.edit_message_text(response)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        keyboard = [[
            InlineKeyboardButton(
                "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                callback_data=f"subscribe_{len(self.user_searches[user_id])-1}")
        ]]
        update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ConversationHandler.END

    def _format_price(self, seats: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö"""
        if not seats:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        prices = [float(s.get('price')) for s in seats if s.get('price')]
        if not prices:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        min_price = min(prices)
        return f"–æ—Ç {min_price} —Ä—É–±."

    def _format_seats(self, seats: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö"""
        if not seats:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        free_seats = sum(int(s.get('free', 0)) for s in seats)
        return f"{free_seats} —Å–≤–æ–±–æ–¥–Ω—ã—Ö" if free_seats > 0 else "–Ω–µ—Ç –º–µ—Å—Ç"
    
    def cancel(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        return ConversationHandler.END
    
    def error_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
        
        if update and update.effective_message:
            update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    def subscribe(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        search_idx = int(query.data.split('_')[1])
        
        if user_id not in self.active_subscriptions:
            self.active_subscriptions[user_id] = []
        
        search_data = self.user_searches[user_id][search_idx]
        self.active_subscriptions[user_id].append(search_data)
        
        query.edit_message_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É!")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        job_queue = self.updater.job_queue
        job_queue.run_repeating(
            self.check_tickets_periodically, 
            interval=1800,  # 30 –º–∏–Ω—É—Ç
            first=10
        )
        self.updater.start_polling()
        self.updater.idle()


if __name__ == '__main__':
    from dotenv import load_dotenv
    import os
    
    load_dotenv()
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
    
    bot = RzdTicketBot(BOT_TOKEN)
    bot.run()